var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import { arg, format, HelpError, isError, getSchemaPath, logger } from "@prisma/sdk";
import chalk from "chalk";
import {
  getSeedCommandFromPackageJson,
  executeSeedCommand,
  verifySeedConfigAndReturnMessage,
  legacyTsNodeScriptWarning
} from "../utils/seed";
const _DbSeed = class {
  static new() {
    return new _DbSeed();
  }
  async parse(argv) {
    const args = arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    }, false);
    if (isError(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--preview-feature"]) {
      logger.warn(`Prisma "db seed" was in Preview and is now Generally Available.
You can now remove the ${chalk.red("--preview-feature")} flag.`);
      await legacyTsNodeScriptWarning();
    }
    if (args["--schema"]) {
      logger.warn(chalk.yellow(`The "--schema" parameter is not used anymore by "prisma db seed" since version 3.0 and can now be removed.`));
    }
    const seedCommandFromPkgJson = await getSeedCommandFromPackageJson(process.cwd());
    if (!seedCommandFromPkgJson) {
      const schemaPath = await getSchemaPath(args["--schema"]);
      const message = await verifySeedConfigAndReturnMessage(schemaPath);
      if (message) {
        throw new Error(message);
      }
      return ``;
    }
    const successfulSeeding = await executeSeedCommand(seedCommandFromPkgJson);
    if (successfulSeeding) {
      return `
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.`;
    } else {
      process.exit(1);
      return ``;
    }
  }
  help(error) {
    if (error) {
      return new HelpError(`
${chalk.bold.red(`!`)} ${error}
${_DbSeed.help}`);
    }
    return _DbSeed.help;
  }
};
let DbSeed = _DbSeed;
__name(DbSeed, "DbSeed");
DbSeed.help = format(`
${process.platform === "win32" ? "" : chalk.bold("\u{1F64C}  ")}Seed your database

${chalk.bold("Usage")}

  ${chalk.dim("$")} prisma db seed [options]

${chalk.bold("Options")}

  -h, --help   Display this help message
`);
export {
  DbSeed
};

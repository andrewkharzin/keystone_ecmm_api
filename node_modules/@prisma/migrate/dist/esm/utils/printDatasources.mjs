var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
import indent from "indent-string";
function printDatasources(internalDatasources) {
  return internalDatasources.map((d) => String(new InternalDataSourceClass(d))).join("\n\n");
}
__name(printDatasources, "printDatasources");
const tab = 2;
class InternalDataSourceClass {
  constructor(dataSource) {
    this.dataSource = dataSource;
  }
  toString() {
    const { dataSource } = this;
    const obj = {
      provider: dataSource.provider,
      url: dataSource.url
    };
    if (dataSource.config && typeof dataSource.config === "object") {
      Object.assign(obj, dataSource.config);
    }
    return `datasource ${dataSource.name} {
${indent(printDatamodelObject(obj), tab)}
}`;
  }
}
__name(InternalDataSourceClass, "InternalDataSourceClass");
function printDatamodelObject(obj) {
  const maxLength = Object.keys(obj).reduce((max, curr) => Math.max(max, curr.length), 0);
  return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${typeof value === "object" && value && value.value ? JSON.stringify(value.value) : JSON.stringify(value)}`).join("\n");
}
__name(printDatamodelObject, "printDatamodelObject");
export {
  printDatamodelObject,
  printDatasources
};

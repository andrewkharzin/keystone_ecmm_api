
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.4.0
 * Query Engine version: 1c9fdaa9e2319b814822d6dbfd0a69e1fcc13a85
 */
Prisma.prismaVersion = {
  client: "3.4.0",
  engine: "1c9fdaa9e2319b814822d6dbfd0a69e1fcc13a85"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  roleId: 'roleId',
  passwordResetToken: 'passwordResetToken',
  passwordResetIssuedAt: 'passwordResetIssuedAt',
  passwordResetRedeemedAt: 'passwordResetRedeemedAt'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  photoId: 'photoId',
  status: 'status',
  price: 'price',
  userId: 'userId'
});

exports.Prisma.ProductImageScalarFieldEnum = makeEnum({
  id: 'id',
  image: 'image',
  altText: 'altText'
});

exports.Prisma.CartItemScalarFieldEnum = makeEnum({
  id: 'id',
  quantity: 'quantity',
  productId: 'productId',
  userId: 'userId'
});

exports.Prisma.OrderItemScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  photoId: 'photoId',
  price: 'price',
  quantity: 'quantity',
  orderId: 'orderId'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  total: 'total',
  userId: 'userId',
  charge: 'charge'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  canManageProducts: 'canManageProducts',
  canSeeOtherUsers: 'canSeeOtherUsers',
  canManageUsers: 'canManageUsers',
  canManageRoles: 'canManageRoles',
  canManageCart: 'canManageCart',
  canManageOrders: 'canManageOrders'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Product: 'Product',
  ProductImage: 'ProductImage',
  CartItem: 'CartItem',
  OrderItem: 'OrderItem',
  Order: 'Order',
  Role: 'Role'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

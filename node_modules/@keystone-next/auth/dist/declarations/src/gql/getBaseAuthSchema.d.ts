import type { ItemRootValue } from '@keystone-next/keystone/types';
import { graphql } from '@keystone-next/keystone';
import { AuthGqlNames, SecretFieldImpl } from '../types';
export declare function getBaseAuthSchema<I extends string, S extends string>({ listKey, identityField, secretField, gqlNames, secretFieldImpl, base, }: {
    listKey: string;
    identityField: I;
    secretField: S;
    gqlNames: AuthGqlNames;
    secretFieldImpl: SecretFieldImpl;
    base: graphql.BaseSchemaMeta;
}): {
    extension: {
        query: {
            authenticatedItem: import("@graphql-ts/schema").Field<unknown, {}, import("@graphql-ts/schema").UnionType<ItemRootValue, import("@keystone-next/keystone/types").KeystoneContext>, string, import("@keystone-next/keystone/types").KeystoneContext>;
        };
        mutation: {
            [x: string]: import("@graphql-ts/schema").Field<unknown, {
                [x: string]: graphql.Arg<graphql.NonNullType<graphql.ScalarType<string>>, false>;
            }, import("@graphql-ts/schema").UnionType<{
                sessionToken: string;
                item: ItemRootValue;
            } | {
                message: string;
            }, import("@keystone-next/keystone/types").KeystoneContext>, string, import("@keystone-next/keystone/types").KeystoneContext>;
        };
    };
    ItemAuthenticationWithPasswordSuccess: import("@graphql-ts/schema").ObjectType<{
        sessionToken: string;
        item: ItemRootValue;
    }, import("@keystone-next/keystone/types").KeystoneContext>;
};
